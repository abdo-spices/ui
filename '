import * as React from 'react'
import { cn, groupArrays } from '@/lib/utils'
import {
  Button,
  ButtonProps,
  buttonVariants,
  CommandType,
} from '@/registry/registry-ui-components'
import {
  DropdownMenu,
  DropdownMenuCheckboxItem,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuPortal,
  DropdownMenuRadioItem,
  DropdownMenuSeparator,
  DropdownMenuShortcut,
  DropdownMenuSub,
  DropdownMenuSubContent,
  DropdownMenuSubTrigger,
  DropdownMenuTrigger,
} from './dropdown-menu'

export interface DropdownMenuOptionsDataType
  extends Partial<
    React.ComponentPropsWithoutRef<typeof DropdownMenuCheckboxItem> &
    React.ComponentPropsWithoutRef<typeof DropdownMenuItem> &
    React.ComponentPropsWithoutRef<typeof DropdownMenuRadioItem>
  > {
  icon: React.ReactNode
  command?: React.ComponentPropsWithoutRef<typeof DropdownMenuShortcut> &
  CommandType
  nestedData?: React.ComponentPropsWithoutRef<typeof DropdownMenuSubContent> &
  DropdownMenuOptionsType
}

export interface DropdownMenuOptionsType {
  itemType?: 'checkbox' | 'radio' | 'label'
  optionsData?: DropdownMenuOptionsDataType[]
  group?: number[]
}

export interface DropdownMenuViewProps {
  wrapper?: React.ComponentPropsWithoutRef<typeof DropdownMenu>
  content: {
    label?: React.ComponentPropsWithoutRef<typeof DropdownMenuLabel>
    options: DropdownMenuOptionsType
  } & React.ComponentPropsWithoutRef<typeof DropdownMenuContent>
  trigger: React.ComponentPropsWithoutRef<typeof DropdownMenuTrigger> &
  ButtonProps
}

export function DropdownMenuView({
  wrapper,
  content,
  trigger,
}: DropdownMenuViewProps) {
  const {
    className: optionsClassName,
    options,
    label,
    align = 'end',
    ...contentProps
  } = content ?? {}

  const groupedOption = groupArrays(
    options?.group ?? [options?.optionsData?.length || 1],
    options?.optionsData ?? [],
  )

  return (
    <DropdownMenu modal={wrapper?.modal ?? false}>
      <DropdownWrapperTrigger trigger={trigger} />

      <DropdownMenuContent
        align={align}
        className={cn('w-[200px]', optionsClassName)}
        {...contentProps}
      >
        <DropdownWrapperLabel label={label} />

        {groupedOption.map((group, idx) => {
          return (
            <React.Fragment key={`group-${idx}`}>
              {group.map((item, idx) => {
                const { nestedData, key: _key } = item

                const {
                  className: nestedClassName,
                  group: nestedGroup,
                  optionsData: nestedOptions,
                  ...nestedProps
                } = nestedData ?? {}

                const groupedNestedOption =
                  groupArrays(
                    nestedData?.group ?? [nestedData?.optionsData?.length || 1],
                    nestedData?.optionsData ?? [],
                  ) ?? []

                return (
                  <React.Fragment key={`item-${idx}`}>
                    {!nestedData?.optionsData?.length ? (
                      <DropdownWrapperContentItem item={item} idx={idx} />
                    ) : (
                      <DropdownMenuSub key={`sub-item-${idx}`}>
                        <DropdownWrapperSubItem item={item} />
                        <DropdownMenuPortal>
                          <DropdownMenuSubContent
                            className={cn('w-[200px]', nestedClassName)}
                            {...nestedProps}
                          >
                            {groupedNestedOption?.map((nestedItem, idx) => {
                              return (
                                <React.Fragment key={`nested-${idx}`}>
                                  <DropdownWrapperSubContent
                                    nestedData={nestedItem}
                                  />
                                  {idx !== groupedNestedOption?.length - 1 && (
                                    <DropdownMenuSeparator
                                      key={`separator-${idx}`}
                                    />
                                  )}
                                </React.Fragment>
                              )
                            })}
                          </DropdownMenuSubContent>
                        </DropdownMenuPortal>
                      </DropdownMenuSub>
                    )}
                  </React.Fragment>
                )
              })}
              {idx !== groupedOption.length - 1 && <DropdownMenuSeparator />}
            </React.Fragment>
          )
        })}
      </DropdownMenuContent>
    </DropdownMenu>
  )
}

export function DropdownWrapperTrigger({
  trigger,
}: {
  trigger: React.ComponentPropsWithoutRef<typeof DropdownMenuTrigger> &
  ButtonProps
}) {
  const { className, command, icon, children, ...props } = trigger
  return (
    <DropdownMenuTrigger
      className={cn(
        buttonVariants({ variant: 'ghost', size: 'sm', className }),
      )}
      {...props}
    >
      {icon && icon}
      {children}
      {command && (
        <>
          {command.label && (
            <DropdownMenuShortcut {...command} children={command.label} />
          )}
          <Button command={command} className="sr-only hidden" />
        </>
      )}
    </DropdownMenuTrigger>
  )
}

export function DropdownWrapperLabel({
  label,
}: { label?: React.ComponentProps<typeof DropdownMenuLabel> }) {
  const { className, ...props } = label ?? {}
  return (
    label && (
      <>
        <DropdownMenuLabel className={cn('text-sm', className)} {...props} />
        <DropdownMenuSeparator />
      </>
    )
  )
}

export function DropdownWrapperContentItem({
  item,
}: { item: DropdownMenuOptionsDataType; idx: number }) {
  const {
    children,
    className,
    itemType = 'label',
    value,
    icon: Icon,
    nestedData,
    key: _key,
    ...props
  } = item

  const Component =
    itemType === 'checkbox'
      ? DropdownMenuCheckboxItem
      : itemType === 'radio'
        ? DropdownMenuRadioItem
        : DropdownMenuItem

  return (
    <DropdownMenuCheckboxItem
      checked={true}
      // value={value as string}
      className={cn(
        buttonVariants({
          variant: 'ghost',
          size: 'sm',
        }),
        'flex gap-2 items-center justify-start',
        className,
      )}
      {...props}
    >
      {Icon && Icon}
      {children}
      {item.command && (
        <>
          {item.command.label && (
            <DropdownMenuShortcut
              {...item.command}
              children={item.command.label}
            />
          )}
          <Button command={item.command} className="sr-only hidden" />
        </>
      )}
    </DropdownMenuCheckboxItem>
  )
}

export function DropdownWrapperSubItem({
  item,
}: { item: DropdownMenuOptionsDataType }) {
  const { children, className, icon, ...props } = item
  return (
    <DropdownMenuSubTrigger
      className={cn(
        buttonVariants({
          variant: 'ghost',
          size: 'sm',
          className: 'w-full gap-2 pr-1',
        }),
      )}
      {...props}
    >
      {icon}
      <span>{children}</span>
    </DropdownMenuSubTrigger>
  )
}

export function DropdownWrapperSubContent({
  nestedData,
}: { nestedData: DropdownMenuOptionsDataType[] }) {
  return nestedData.map((nestedItemInner, idx) => {
    const {
      children,
      itemType = 'label',
      value,
      icon: Icon,
      className,
      ...props
    } = nestedItemInner
    const { label, ...commandProps } = nestedItemInner.command ?? {}

    const NestedComponent =
      itemType === 'checkbox'
        ? DropdownMenuCheckboxItem
        : itemType === 'radio'
          ? DropdownMenuRadioItem
          : DropdownMenuItem

    return (
      <NestedComponent
        value={value as string}
        key={`nested-item-${idx}`}
        className={cn(
          buttonVariants({
            variant: 'ghost',
            size: 'sm',
          }),
          'flex gap-2 items-center justify-start',
          className,
        )}
        {...props}
      >
        {Icon && Icon}
        {children}
        {nestedItemInner.command && (
          <>
            <DropdownMenuShortcut
              children={label}
              {...commandProps}
              key={`nested-item-shortcut-${idx}`}
            />
            <Button
              command={nestedItemInner.command}
              className="sr-only hidden"
            />
          </>
        )}
      </NestedComponent>
    )
  })
}
