{"version":3,"sources":["../src/main/main.ts","../src/main/main.constants.ts","../src/commands/init/init.constants.ts","../src/commands/init/init.lib.ts","../src/commands/init/init.dto.ts","../src/utils/get-project-info/get-project-info.constants.ts","../src/utils/text-styling/logger.ts","../src/utils/text-styling/highlighter.ts","../src/utils/checkers/checkers.ts","../src/utils/resolve-import/resolve-import.ts","../src/utils/get-project-info/get-project-info.ts","../src/utils/get-project-config/get-project-config.constants.ts","../src/utils/get-project-config/get-project-config.dto.ts","../src/utils/get-project-type/get-project-type.lib.ts","../src/utils/get-project-type/get-project-type.constants.ts","../src/utils/get-project-type/get-project-type.ts","../src/utils/transformers/transformers.ts","../src/utils/get-project-type/get-project-type.dto.ts","../src/utils/spinner.ts","../src/utils/get-package-manager/get-package-manager.ts","../src/utils/pref-light-typescript/pref-light-typescript.constants.ts","../src/utils/pref-light-typescript/pref-light-typescript.lib.ts","../src/utils/pref-light-typescript/pref-light-typescript.dto.ts","../src/utils/pref-light-typescript/pref-light-typescript.ts","../src/utils/get-project-config/get-project-config.ts","../src/utils/url-mutating/url-mutating.dto.ts","../src/utils/pref-light-tailwindcss/pref-light-tailwindcss.constants.ts","../src/utils/pref-light-tailwindcss/pref-light-tailwindcss.dto.ts","../src/utils/pref-light-tailwindcss/pref-light-tailwindcss.lib.ts","../src/utils/pref-light-tailwindcss/pref-light-tailwindcss.ts","../src/utils/get-registry/get-registry.dto.ts","../src/utils/get-registry/get-registry.constants.ts","../src/utils/get-registry/get-registry.lib.ts","../src/utils/get-registry/get-registry.ts","../src/commands/init/init.ts","../src/index.ts"],"names":["config","REGISTRY_URL","init_command_config","init_options_schema","z","IGNORED_DIRECTORIES","error","warning","info","success","logSymbols","logger","with_icon","args","kleur","highlighter","red","bgRed","yellow","bgYellow","green","bgGreen","cyan","bgCyan","checkTailwindCssInstalled","cwd","fg","resolve_import","importPath","createMatchPath","get_tailwindcss_file","files","file","content","fs","path","get_ts_config_alias_prefix","ts_config","loadConfig","alias","paths","get_package_json","package_json_path","explorer","cosmiconfig","default_js_config","raw_config_schema","config_cchema","detectNextJs","ProjectTypeEnum","detectors","get_project_type","detector","enumToArray","enumObj","project_types","project_types_schema","spinner","text","options","ora","get_package_manager","packageManager","detect","getPackageRunner","pm","typescript_prompts","typescript_dependencies","js_config","install_typescript","typescript","install_spinner","installation_step_1","execa","adding_typescript_config","is_ts","tailwind_config_spinner","checkTypeScriptInstalled","check_config_exist","pref_light_typescript_options_schema","pref_light_typescript","is_configured","prompts","get_raw_config","rawConfig","get_config","resolve_config_paths","get_project_config","project_config","project_type","tailwindcss_file","ts_config_alias_prefix","chalk","is_tsx","configString","val","tailwindcss_prompts","tailwindcss_dependencies","tailwindcss_init","default_config","pref_light_tailwindcss_options_schema","install_tailwindcss","packageRunner","installation_step_2","adding_tailwind_config","type","tailwind_config","css_file_path","css_file_content","default_css_without_duckui","pref_light_tailwindcss","tailwind","registry_item_type_cchema","registry_item_file_schema","registry_item_tailwind_schema","registry_item_css_vars_schema","registry_item_schema","styles_schema","registry_base_color_schema","registry_resolved_items_tree_schema","error_messages","is_url","get_registry_url","url","fetch_registry_url","response","axios","check_status","result","message","get_registry_item","name","style","hi","init_command_action","opt","registry","description","option_1","option_2","option_3","option_4","option_5","option_6","init_command","Command","init","duck_ui","packageJson","__require"],"mappings":"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","file":"index.js","sourcesContent":["import { Command } from 'commander'\nimport { config } from './main.constants'\nimport { init_command } from '../commands/init'\nimport { get_package_json } from '../utils'\n\nexport function init() {\n  const duck_ui = new Command()\n  const packageJson = get_package_json()\n\n  duck_ui.name(packageJson?.name || config.name)\n  duck_ui.description(packageJson?.description || config.description)\n  duck_ui.version(packageJson?.version || config.version)\n  duck_ui.addCommand(init_command())\n\n  duck_ui.parse()\n}\n","export const config = {\n  name: 'duck-ui',\n  description: 'This is the main file of the duck-ui CLI application written with TypeScript',\n  version: '1.0.0',\n}\n\nexport const REGISTRY_URL = 'https://duckui.vercel.app/registry'\n","import { InitCommandConfig } from './init.types'\n\nexport const init_command_config: InitCommandConfig = {\n  name: 'init',\n  description: 'init the project',\n  options: {\n    option_1: {\n      flags: '-y, --yes',\n      description: 'skip confirmation prompt.',\n      defaultValue: false,\n    },\n    option_2: {\n      flags: '-d, --defaults,',\n      description: 'use default configuration.',\n      defaultValue: false,\n    },\n    option_3: {\n      flags: '-c, --cwd <cwd>',\n      description: 'the working directory. defaults to the current directory.',\n      defaultValue: process.cwd(),\n    },\n    option_4: {\n      flags: '-s, --silent',\n      description: 'silent mode',\n      defaultValue: false,\n    },\n    option_5: {\n      flags: '-f, --force',\n      description: 'will force and overwrite old configurations.',\n      defaultValue: false,\n    },\n    option_6: {\n      flags: '-sd, --src-dir <src-dir>',\n      description: 'the source directory. defaults to the current directory.',\n      defaultValue: process.cwd(),\n    },\n  },\n}\n","import path from 'path'\nimport { init_options_schema, InitOptions } from './init.dto'\nimport {\n  fetch_registry_url,\n  get_project_config,\n  get_registry_base_color,\n  get_registry_index,\n  get_registry_item,\n  logger,\n  pref_light_tailwindcss,\n  pref_light_typescript,\n  registry_index_schema,\n} from '@/src/utils'\n\nexport async function init_command_action(opt: InitOptions) {\n  const options = init_options_schema.parse(opt)\n  const cwd = path.resolve(options.cwd)\n\n  logger.info({ args: ['Checking for preflight...'] })\n\n  await pref_light_typescript(cwd)\n  await pref_light_tailwindcss(cwd)\n  const config = await get_project_config(cwd)\n\n  logger.success({ with_icon: true, args: [, 'Done.!, preflight passed'] })\n\n  // console.log(config)\n\n  // const registry = await get_registry_index()\n  const registry = await get_registry_item('button', 'default')\n  // const registry = await get_registry_base_color()\n\n  console.log(registry)\n\n  // logger.info({ args: ['Done.!'] })\n}\n","import { z } from 'zod'\n\nexport const init_options_schema = z.object({\n  yes: z.boolean().default(false),\n  defaults: z.boolean().default(false),\n  cwd: z.string().default(process.cwd()),\n  slint: z.boolean().default(false),\n  force: z.boolean().default(false),\n  srcDir: z.string().default(process.cwd()),\n})\n\nexport type InitOptions = z.infer<typeof init_options_schema>\n","import { highlighter } from '../text-styling'\n\nexport const IGNORED_DIRECTORIES = [\n  '**/node_modules',\n  '**/.git',\n  '**/dist',\n  '**/.next',\n  '**/build',\n  '**/coverage',\n  '**/public',\n]\n","import kleur from 'kleur'\nimport logSymbols from 'log-symbols'\nimport { LoggerParams, LoggerType } from './text-styling.types'\nconst { error, warning, info, success } = logSymbols\n\n// Define the logger object with proper types\nexport const logger: LoggerType = {\n  error: ({ with_icon = true, args }: LoggerParams): LoggerType => {\n    console.log(kleur.red([with_icon ? error : '', 'ERROR:'].join(' ')), kleur.red(args.join(' ')))\n    return logger\n  },\n\n  warn: ({ with_icon = true, args }: LoggerParams): LoggerType => {\n    console.log(kleur.yellow([with_icon ? warning : '', 'WARN:'].join(' ')), kleur.yellow(args.join(' ')))\n    return logger\n  },\n\n  info: ({ with_icon = true, args }: LoggerParams): LoggerType => {\n    console.log(kleur.green([with_icon ? info : '', 'INFO:'].join(' ')), kleur.green(args.join(' ')))\n    return logger\n  },\n\n  success: ({ args, with_icon }: LoggerParams): LoggerType => {\n    console.log(kleur.green([with_icon ? success : '', 'SUCCESS:'].join(' ')), kleur.green(args.join(' ')))\n    return logger\n  },\n\n  break: (): LoggerType => {\n    console.log('')\n    return logger\n  },\n}\n","import { cyan, green, red, yellow, bgRed, bgYellow, bgGreen, bgCyan } from 'kleur/colors'\n\nexport const highlighter = {\n  error: red,\n  bg_error: bgRed,\n  warn: yellow,\n  bg_warn: bgYellow,\n  success: green,\n  bg_success: bgGreen,\n  info: cyan,\n  bg_info: bgCyan,\n}\n","import { IGNORED_DIRECTORIES, tailwindCssInstallationGuide } from '../get-project-info/get-project-info.constants'\nimport fs from 'fs-extra'\nimport path from 'path'\nimport fg from 'fast-glob'\nimport { logger } from '../text-styling'\n\n// Check if TailwindCss is installed\nexport async function checkTailwindCssInstalled(cwd: string) {\n  const tailwindcss = fg.globSync('tailwind.config.*', {\n    cwd,\n    deep: 3,\n    ignore: IGNORED_DIRECTORIES,\n  })\n\n  if (!tailwindcss.length) return false\n  return true\n}\n\n// Check if the working directory exists\nexport function checkDirectoryExist(cwd: string): typeof logger | undefined {\n  if (!fs.lstatSync(cwd).isDirectory()) {\n    return logger.error({\n      args: [`The working directory ${cwd} does not exist.`],\n    })\n  }\n}\n\n// Check if the project is valid\nexport function checkProjectIsValid(cwd: string): void {\n  // Check if the cwd exists && it's a directory\n  checkDirectoryExist(cwd)\n\n  // Check TailwindCss is configured\n  checkTailwindCssInstalled(cwd)\n}\n","import { createMatchPath, type ConfigLoaderSuccessResult } from 'tsconfig-paths'\n\nexport async function resolve_import(\n  importPath: string,\n  config: Pick<ConfigLoaderSuccessResult, 'absoluteBaseUrl' | 'paths'>\n) {\n  return createMatchPath(config.absoluteBaseUrl, config.paths)(importPath, undefined, () => true, ['.ts', '.tsx'])\n}\n","import fg from 'fast-glob'\nimport fs from 'fs-extra'\nimport { IGNORED_DIRECTORIES } from './get-project-info.constants'\nimport path from 'path'\nimport { loadConfig } from 'tsconfig-paths'\nimport { type PackageJson } from 'type-fest'\nimport { logger } from '../text-styling'\n\n// Get TailwindCss File\nexport async function get_tailwindcss_file(cwd: string) {\n  const files = fg.sync(['**/*.css', '**/*.scss', '**/*.sass'], {\n    cwd,\n    deep: 3,\n    ignore: IGNORED_DIRECTORIES,\n  })\n\n  if (!files.length) {\n    return null\n  }\n\n  for (const file of files) {\n    const content = await fs.readFile(path.resolve(cwd, file), 'utf8')\n\n    if (\n      content.includes('@tailwind base') ||\n      content.includes('@tailwind components') ||\n      content.includes('@tailwind utilities')\n    ) {\n      return file\n    }\n  }\n\n  return null\n}\n\n// Get Ts Config Alias Prefix\nexport async function get_ts_config_alias_prefix(cwd: string) {\n  const ts_config = loadConfig(cwd)\n\n  if (ts_config.resultType === 'failed' || !ts_config.paths) {\n    return null\n  }\n\n  for (const [alias, paths] of Object.entries(ts_config.paths)) {\n    if (paths.includes('./src/*') || paths.includes('./*')) {\n      return alias.at(0)\n    }\n  }\n\n  return null\n}\n\n// Get package.json\nexport function get_package_json(): PackageJson | null {\n  const files = fg.sync(['package.json'], {\n    cwd: process.cwd(),\n    deep: 1,\n    ignore: IGNORED_DIRECTORIES,\n  })\n\n  if (!files.length) {\n    logger.error({ args: ['package.json not found'] })\n    return process.exit(1)\n  }\n\n  const package_json_path = path.join(process.cwd(), 'package.json')\n\n  const package_json: PackageJson = JSON.parse(fs.readFileSync(package_json_path, 'utf8'))\n\n  return package_json\n}\n","import { cosmiconfig } from 'cosmiconfig'\nimport { RawConfigType } from './get-project-config.dto'\n\nexport const explorer = cosmiconfig('duck-ui', {\n  searchPlaces: ['duck-ui.config.js', 'duck-ui.config.ts'],\n})\n\nexport const default_js_config = (config: RawConfigType) => `export default ${JSON.stringify(config, null, 2)};\n`\n","import { z } from 'zod'\n\nexport const raw_config_schema = z\n  .object({\n    $schema: z.string().optional(),\n    style: z.string(),\n    rsc: z.coerce.boolean().default(false),\n    tsx: z.coerce.boolean().default(true),\n    tailwind: z.object({\n      config: z.string(),\n      css: z.string(),\n      baseColor: z.string(),\n      cssVariables: z.boolean().default(true),\n      prefix: z.string().default('').optional(),\n    }),\n    aliases: z.object({\n      components: z.string(),\n      hooks: z.string().optional(),\n      pages: z.string().optional(),\n      utils: z.string(),\n      lib: z.string().optional(),\n      ui: z.string().optional(),\n    }),\n  })\n  .strict()\n\nexport type RawConfigType = z.infer<typeof raw_config_schema>\n\nexport const config_cchema = raw_config_schema.extend({\n  resolvedPaths: z.object({\n    tailwindConfig: z.string(),\n    tailwindCss: z.string(),\n    utils: z.string(),\n    components: z.string(),\n    ui: z.string(),\n  }),\n})\n","import fg from 'fast-glob'\nimport { Detector } from './get-project-type.types'\nimport { IGNORED_DIRECTORIES } from '../get-project-info'\n\n// Detect NextJs\nexport const detectNextJs: Detector = {\n  type: 'NEXT_JS',\n  detect: async (cwd: string) => {\n    const files = await fg.glob('**/*', {\n      cwd,\n      deep: 3,\n      ignore: IGNORED_DIRECTORIES,\n    })\n\n    const is_nextjs = files.find(file => file.includes('next.config'))\n\n    if (is_nextjs) return true\n    return false\n  },\n}\n","import { detectNextJs } from './get-project-type.lib'\n\nexport enum ProjectTypeEnum {\n  NEXT_JS = 'Next.js',\n  VITE = 'Vite',\n  CREATE_REACT_APP = 'Create React App',\n  UNKNOWN = 'Unknown',\n}\n\n// Gather all detectors in a single array\nexport const detectors = [detectNextJs]\n","import { detectors, ProjectTypeEnum } from './get-project-type.constants'\nimport { ProjectType } from './get-project-type.types'\n\nexport async function get_project_type(cwd: string): Promise<ProjectType> {\n  for (const detector of detectors) {\n    const isDetected = await detector.detect(cwd)\n    if (isDetected) {\n      return detector.type\n    }\n  }\n  return 'UNKNOWN'\n}\n","export function enumToArray<T extends {}>(enumObj: T): T[keyof T][] {\n  return Object.values(enumObj) as T[keyof T][]\n}\n","import { z } from 'zod'\nimport { enumToArray } from '../transformers'\nimport { ProjectTypeEnum } from './get-project-type.constants'\n\nexport const project_types = enumToArray(ProjectTypeEnum)\n\nexport const project_types_schema = z.enum([...(project_types as [string, ...string[]])])\n\nexport type ProjectType = ProjectTypeEnum\n","import ora, { type Options } from 'ora'\n\nexport function spinner(\n  text: Options['text'],\n  options?: {\n    silent?: boolean\n  }\n) {\n  return ora({\n    color: 'yellow',\n    text,\n    isSilent: options?.silent,\n  })\n}\n","import { Agent, detect } from '@antfu/ni'\n\nexport async function get_package_manager(cwd: string): Promise<Exclude<Agent, 'yarn@berry' | 'pnpm@6'>> {\n  const packageManager = await detect({\n    programmatic: true,\n    cwd,\n  })\n\n  if (packageManager === 'yarn@berry') return 'yarn'\n  if (packageManager === 'pnpm@6') return 'pnpm'\n  if (!packageManager) return 'npm'\n\n  return packageManager\n}\n\nexport async function getPackageRunner(\n  cwd: string,\n  pm: Exclude<Agent, 'yarn@berry' | 'pnpm@6'>\n): Promise<'pnpm dlx' | 'bunx' | 'npx'> {\n  const packageManager = pm ?? (await get_package_manager(cwd))\n\n  if (packageManager === 'pnpm') return 'pnpm dlx'\n  if (packageManager === 'bun') return 'bunx'\n  return 'npx'\n}\n","import { PromptObject } from 'prompts'\nimport { highlighter } from '../text-styling'\n\nexport const typescript_prompts: PromptObject<string>[] = [\n  {\n    type: 'confirm',\n    name: 'typescript',\n    message: `Would you like to install ${highlighter.info('TypeScript')} (recommended)`,\n    initial: false,\n    active: 'yes',\n    inactive: 'no',\n  },\n]\n\nexport const typescript_dependencies = ['typescript']\n\nexport const js_config = `{\n  \"compilerOptions\": {\n    \"target\": \"es6\",                   // Target ECMAScript version\n    \"module\": \"commonjs\",               // Specify module code generation\n    \"baseUrl\": \".\",                     // Base directory for non-relative module names\n    \"paths\": {                          // Path aliases for cleaner imports\n      \"@components/*\": [\"src/components/*\"],\n      \"@utils/*\": [\"src/utils/*\"]\n    },\n    \"jsx\": \"react-jsx\",                 // Set JSX handling for React projects\n    \"allowSyntheticDefaultImports\": true, // Allow default imports from modules with no default export\n    \"esModuleInterop\": true,            // Import compatibility for CommonJS and ES modules\n    \"strict\": true                      // Enable all strict type-checking options\n  },\n  \"include\": [\"src\"],                   // Include files in the src folder\n  \"exclude\": [\"node_modules\", \"dist\"]   // Exclude folders from the config\n}\n`\n\nexport const ts_config = `{\n  \"compilerOptions\": {\n    \"target\": \"es6\", // Target ECMAScript version\n    \"module\": \"commonjs\", // Module system used in Node.js\n    \"lib\": [\"dom\", \"es6\", \"dom.iterable\", \"scripthost\"], // Standard library\n    \"jsx\": \"react-jsx\", // JSX support for React\n    \"outDir\": \"./dist\", // Output directory for compiled files\n    \"rootDir\": \"./src\", // Root directory of source files\n    \"strict\": true, // Enable strict type checking\n    \"moduleResolution\": \"node\", // Module resolution strategy\n    \"esModuleInterop\": true, // Allow default imports from CommonJS\n    \"skipLibCheck\": true, // Skip type checking of declaration files\n    \"forceConsistentCasingInFileNames\": true, // Enforce consistent file naming\n    \"resolveJsonModule\": true, // Support importing JSON files\n    \"allowSyntheticDefaultImports\": true, // Synthetic default imports for compatibility\n    \"baseUrl\": \".\", // Base directory for module resolution\n    \"paths\": {\n      // Define path aliases\n      \"@/*\": [\"./src/*\"]\n    }\n  },\n  \"include\": [\"src\"], // Include all source files in the src directory\n  \"exclude\": [\"node_modules\", \"dist\", \"tests\"] // Exclude directories from compilation\n}\n`\n","import fg from 'fast-glob'\nimport fs from 'fs-extra'\nimport path from 'path'\nimport { spinner } from '../spinner'\nimport { highlighter, logger } from '../text-styling'\nimport { get_package_manager } from '../get-package-manager'\nimport { execa } from 'execa'\nimport { js_config, ts_config, typescript_dependencies } from './pref-light-typescript.constants'\nimport { IGNORED_DIRECTORIES } from '../get-project-info'\n\n// Install Typescript\nexport async function install_typescript(cwd: string, typescript: boolean) {\n  const install_spinner = spinner(highlighter.info('Installing TypeScript...')).start()\n\n  const packageManager = await get_package_manager(cwd)\n  const { failed: installation_step_1 } = await execa(\n    packageManager,\n    [packageManager !== 'npm' ? 'install' : 'add', ...typescript_dependencies, '-D'],\n    {\n      cwd: cwd,\n      shell: true,\n    }\n  )\n  if (installation_step_1) return install_spinner.fail()\n\n  // Replacing default config with tailwind config that matches the project type\n  await adding_typescript_config(cwd, typescript)\n\n  logger.break()\n  install_spinner.succeed()\n}\n\n// Add Typescript config\nexport async function adding_typescript_config(cwd: string, is_ts: boolean) {\n  const tailwind_config_spinner = spinner(highlighter.info('Adding TypeScript config...')).start()\n\n  await fs.writeFile(path.join(cwd, `${is_ts ? 'ts' : 'js'}config.json`), is_ts ? ts_config : js_config)\n\n  logger.break()\n  tailwind_config_spinner.succeed()\n}\n\n// Check if TypeScript is installed\nexport async function checkTypeScriptInstalled(cwd: string) {\n  return fs.pathExists(path.resolve(cwd, 'tsconfig.json'))\n}\n\n// Check if config exists\nexport async function check_config_exist(cwd: string): Promise<boolean> {\n  const files = fg.sync(['duck-ui.*'], {\n    cwd,\n    deep: 3,\n    ignore: IGNORED_DIRECTORIES,\n  })\n\n  if (!files.length) {\n    return false\n  }\n\n  return true\n}\n","import { z } from 'zod'\n\nexport const pref_light_typescript_options_schema = z.object({\n  typescript: z\n    .boolean({\n      message: 'You have to pick one option',\n      description: 'Would you like to use TypeScript? (yes/no) -default: no',\n    })\n    .default(false),\n})\n","import prompts from 'prompts'\nimport { highlighter, logger } from '../text-styling'\nimport {\n  checkTypeScriptInstalled as check_typescript_installed,\n  check_config_exist,\n  install_typescript,\n} from './pref-light-typescript.lib'\nimport { typescript_prompts } from './pref-light-typescript.constants'\nimport { pref_light_typescript_options_schema } from './pref-light-typescript.dto'\n\nexport async function pref_light_typescript(cwd: string): Promise<void> {\n  const is_configured = await check_config_exist(cwd)\n  const is_ts_installed = await check_typescript_installed(cwd)\n\n  if (is_ts_installed || is_configured) return\n\n  logger.warn({\n    args: [\n      `${highlighter.info('TypeScript')} is not installed. You need to install ${highlighter.info('TypeScript')}...`,\n    ],\n  })\n\n  const options = await prompts(typescript_prompts)\n  const { typescript } = pref_light_typescript_options_schema.parse(options)\n  if (!typescript) return\n\n  await install_typescript(cwd, typescript)\n}\n","import chalk from 'chalk'\nimport fs from 'fs-extra'\nimport { loadConfig } from 'tsconfig-paths'\nimport { default_js_config, explorer } from './get-project-config.constants'\nimport { resolve_import } from '../resolve-import'\nimport { config_cchema, raw_config_schema, RawConfigType } from './get-project-config.dto'\nimport path from 'path'\nimport { get_tailwindcss_file, get_ts_config_alias_prefix } from '../get-project-info'\nimport { highlighter, logger } from '../text-styling'\nimport { get_project_type } from '../get-project-type'\nimport { checkTypeScriptInstalled } from '../pref-light-typescript'\n\nexport async function get_raw_config(cwd: string): Promise<RawConfigType | null> {\n  try {\n    const rawConfig = await explorer.search(cwd)\n    if (!rawConfig) {\n      return null\n    }\n\n    return raw_config_schema.parse(rawConfig.config)\n  } catch (error) {\n    logger.error({\n      args: [`Invalid configuration found in ${cwd}/components.json.`],\n    })\n    process.exit(1)\n  }\n}\n\nexport async function get_config(cwd: string) {\n  const config = await get_raw_config(cwd)\n\n  if (!config) {\n    return null\n  }\n\n  return await resolve_config_paths(cwd, config)\n}\n\n// Resolve Config Paths\nexport async function resolve_config_paths(cwd: string, config: RawConfigType): Promise<RawConfigType> {\n  const ts_config = loadConfig(cwd)\n\n  if (ts_config.resultType === 'failed') {\n    return logger.error({\n      args: [`Failed to leaod ${config.tsx ? 'tsconfig' : 'jsconfig'}.json. ${ts_config.message ?? ''}`.trim()],\n    })\n  }\n\n  return config_cchema.parse({\n    ...config,\n    resolvedPaths: {\n      tailwindConfig: path.resolve(cwd, config.tailwind.config),\n      tailwindCss: path.resolve(cwd, config.tailwind.css),\n      utils: await resolve_import(config.aliases.utils, ts_config),\n      components: await resolve_import(config.aliases.components, ts_config),\n      ui: config.aliases.ui\n        ? await resolve_import(config.aliases.ui, ts_config)\n        : await resolve_import(config.aliases.components, ts_config),\n    },\n  })\n}\n\nexport async function get_project_config(cwd: string) {\n  const project_config = await get_config(cwd)\n\n  if (project_config) {\n    return project_config\n  }\n\n  const project_type = await get_project_type(cwd)\n  const tailwindcss_file = await get_tailwindcss_file(cwd)\n  const ts_config_alias_prefix = await get_ts_config_alias_prefix(cwd)\n\n  if (!project_type || !tailwindcss_file || !ts_config_alias_prefix) {\n    logger.error({\n      args: [`Failed to get project config!, ${chalk.bgRed.white('TailwindCss')} is required`],\n    })\n    return null\n  }\n\n  const is_tsx = await checkTypeScriptInstalled(cwd)\n\n  const config: RawConfigType = {\n    $schema: 'https://duckui.vercel.app/schema.json',\n    rsc: ['NEXT_JS'].includes(project_type),\n    tsx: is_tsx,\n    style: 'default',\n    tailwind: {\n      config: is_tsx ? 'tailwind.config.ts' : 'tailwind.config.js',\n      baseColor: 'zinc',\n      css: tailwindcss_file,\n      cssVariables: true,\n      prefix: '',\n    },\n    aliases: {\n      utils: `${ts_config_alias_prefix}/lib/utils`,\n      components: `${ts_config_alias_prefix}/components`,\n    },\n  }\n\n  // Convert config to a string based on the file type\n  const configString = config?.tsx\n    ? `export const config = ${JSON.stringify(config, null, 2)};`\n    : default_js_config(config)\n\n  try {\n    await fs.writeFile(path.join(cwd, `duck-ui.config.${is_tsx ? 'ts' : 'js'}`), configString, 'utf8')\n  } catch (error) {\n    console.log(error)\n    logger.error({\n      args: [`Failed to create duck-ui.config.${is_tsx ? 'ts' : 'js'}`],\n    })\n    process.exit(1)\n  }\n\n  return resolve_config_paths(cwd, config)\n}\n","import { z } from 'zod'\n\nexport const pathSchema = z.string().min(1, 'Path must be a non-empty string')\n\nexport const pathnameSchema = z.string().refine(val => /\\/chat\\/b\\//.test(val), {\n  message: 'The URL must contain /chat/b/ in the pathname',\n})\n","import { PromptObject } from 'prompts'\nimport { highlighter } from '../text-styling'\n\nexport const tailwindcss_prompts: PromptObject<string>[] = [\n  {\n    type: 'confirm',\n    name: 'tailwind',\n    message: `Would you like to install ${highlighter.info('TailwindCSS')}`,\n    initial: false,\n    active: 'yes',\n    inactive: 'no',\n  },\n]\n\n//NOTE: willing to support more when we have more frameworks to support with duck-ui\nexport const tailwindcss_dependencies = ['tailwindcss', 'postcss', 'autoprefixer']\n\nexport const tailwindcss_init = ['tailwindcss', 'init', '-p']\n\nexport const default_config = `/** @type {import('tailwindcss').Config} */\n    export default {\n    content: [\n      \"./index.html\",\n      \"./src/**/*.{js,ts,jsx,tsx}\",\n    ],\n    theme: {\n      extend: {},\n    },\n    plugins: [],\n  };`\n","import { z } from 'zod'\n\nexport const pref_light_tailwindcss_options_schema = z.object({\n  tailwind: z\n    .boolean({\n      message: 'You have to pick one option',\n      description: 'Would you like to use TailwindCSS? (yes/no) -default: no',\n    })\n    .default(false),\n})\n","import { execa } from 'execa'\nimport path from 'path'\nimport { get_package_manager, getPackageRunner } from '../get-package-manager'\nimport { spinner } from '../spinner'\nimport { highlighter, logger } from '../text-styling'\nimport { default_config, tailwindcss_dependencies, tailwindcss_init } from './pref-light-tailwindcss.constants'\nimport fs from 'fs-extra'\nimport { get_project_type, ProjectType } from '../get-project-type'\nimport { checkTypeScriptInstalled } from '../pref-light-typescript'\n\nexport async function install_tailwindcss(cwd: string) {\n  const install_spinner = spinner(highlighter.info('Installing TailwindCSS...')).start()\n\n  const packageManager = await get_package_manager(cwd)\n  const { failed: installation_step_1 } = await execa(\n    packageManager,\n    [packageManager !== 'npm' ? 'install' : 'add', ...tailwindcss_dependencies],\n    {\n      cwd: cwd,\n      shell: true,\n    }\n  )\n  if (installation_step_1) return install_spinner.fail()\n\n  const packageRunner = await getPackageRunner(cwd, packageManager)\n  const { failed: installation_step_2 } = await execa(packageRunner, [...tailwindcss_init], {\n    cwd: cwd,\n    shell: true,\n  })\n  if (installation_step_2) return install_spinner.fail()\n\n  // Replacing default config with tailwind config that matches the project type\n  await adding_tailwind_config(cwd)\n\n  install_spinner.succeed()\n}\n\nexport async function adding_tailwind_config(cwd: string) {\n  const is_ts = await checkTypeScriptInstalled(cwd)\n  const type = await get_project_type(cwd)\n\n  const tailwind_config_spinner = spinner(highlighter.info('Adding TailwindCSS config...')).start()\n\n  if (is_ts) {\n    await execa(`mv ${path.join(cwd, 'tailwind.config.js')} ${path.join(cwd, `tailwind.config.ts`)}`, {\n      shell: true,\n      cwd,\n    })\n  }\n\n  await fs.writeFile(path.join(cwd, `tailwind.config.${is_ts ? 'ts' : 'js'}`), tailwind_config(type))\n\n  await fs.writeFile(path.join(cwd, css_file_path(type)), css_file_content(type))\n\n  logger.break()\n  tailwind_config_spinner.succeed()\n}\n\n// NOTE: you have to support other types of projects\nexport const tailwind_config = (type: ProjectType) => {\n  return type === 'UNKNOWN' ? default_config : default_config\n}\n\nexport const css_file_path = (type: ProjectType) => {\n  return type === 'UNKNOWN' ? './style.css' : './style.css'\n}\n\nexport function css_file_content(type: ProjectType) {\n  return type === 'UNKNOWN' ? default_css_without_duckui : default_css_without_duckui\n}\n\nexport const default_css_without_duckui = `@tailwind base;\n@tailwind components;\n@tailwind utilities;\n`\n","import { checkTailwindCssInstalled } from '../checkers'\nimport prompts from 'prompts'\nimport { tailwindcss_prompts } from './pref-light-tailwindcss.constants'\nimport { highlighter, logger } from '../text-styling'\nimport { pref_light_tailwindcss_options_schema } from './pref-light-tailwindcss.dto'\nimport { install_tailwindcss } from './pref-light-tailwindcss.lib'\n\nexport async function pref_light_tailwindcss(cwd: string): Promise<void> {\n  const is_tailwind_installed = await checkTailwindCssInstalled(cwd)\n\n  if (is_tailwind_installed) return\n\n  logger.warn({\n    args: [\n      `${highlighter.info('TailwindCss')} is not installed. You need to install ${highlighter.info('TailwindCss')}...`,\n    ],\n  })\n\n  const options = await prompts(tailwindcss_prompts)\n  const { tailwind } = pref_light_tailwindcss_options_schema.parse(options)\n\n  if (!tailwind) return\n\n  await install_tailwindcss(cwd)\n}\n","import { z } from 'zod'\n\n// TODO: Extract this to a shared package.\nexport const registry_item_type_cchema = z.enum([\n  'components:style',\n  'components:lib',\n  'components:example',\n  'components:block',\n  'components:component',\n  'components:ui',\n  'components:hook',\n  'components:theme',\n  'components:page',\n])\n\nexport const registry_item_file_schema = z.object({\n  path: z.string(),\n  content: z.string().optional(),\n  type: registry_item_type_cchema,\n  target: z.string().optional(),\n})\n\nexport const registry_item_tailwind_schema = z.object({\n  config: z\n    .object({\n      content: z.array(z.string()).optional(),\n      theme: z.record(z.string(), z.any()).optional(),\n      plugins: z.array(z.string()).optional(),\n    })\n    .optional(),\n})\n\nexport const registry_item_css_vars_schema = z.object({\n  light: z.record(z.string(), z.string()).optional(),\n  dark: z.record(z.string(), z.string()).optional(),\n})\n\nexport const registry_item_schema = z.object({\n  name: z.string(),\n  type: registry_item_type_cchema,\n  description: z.string().optional(),\n  dependencies: z.array(z.string()).optional(),\n  devDependencies: z.array(z.string()).optional(),\n  registryDependencies: z.array(z.string()).optional(),\n  files: z.array(registry_item_file_schema).optional(),\n  tailwind: registry_item_tailwind_schema.optional(),\n  cssVars: registry_item_css_vars_schema.optional(),\n  meta: z.record(z.string(), z.any()).optional(),\n  docs: z.string().optional(),\n})\n\nexport type RegistryItem = z.infer<typeof registry_item_schema>\n\nexport const registry_index_schema = z.array(\n  registry_item_schema.extend({\n    files: z.array(z.union([z.string(), registry_item_file_schema])).optional(),\n  })\n)\n\nexport const styles_schema = z.array(\n  z.object({\n    name: z.string(),\n    label: z.string(),\n  })\n)\n\nexport const registry_base_color_schema = z.object({\n  inlineColors: z.object({\n    light: z.record(z.string(), z.string()),\n    dark: z.record(z.string(), z.string()),\n  }),\n  cssVars: z.object({\n    light: z.record(z.string(), z.string()),\n    dark: z.record(z.string(), z.string()),\n  }),\n  inlineColorsTemplate: z.string(),\n  cssVarsTemplate: z.string(),\n})\n\nexport const registry_resolved_items_tree_schema = registry_item_schema.pick({\n  dependencies: true,\n  devDependencies: true,\n  files: true,\n  tailwind: true,\n  cssVars: true,\n  docs: true,\n})\n","export const error_messages: { [key: number]: string } = {\n  400: 'Bad request',\n  401: 'Unauthorized',\n  403: 'Forbidden',\n  404: 'Not found',\n  500: 'Internal server error',\n}\n\nexport async function get_registry_base_colors() {\n  return [\n    {\n      name: 'neutral',\n      label: 'Neutral',\n    },\n    {\n      name: 'gray',\n      label: 'Gray',\n    },\n    {\n      name: 'zinc',\n      label: 'Zinc',\n    },\n    {\n      name: 'stone',\n      label: 'Stone',\n    },\n    {\n      name: 'slate',\n      label: 'Slate',\n    },\n  ]\n}\n","import { REGISTRY_URL } from '@/src/main'\nimport axios from 'axios'\nimport { highlighter, logger } from '../text-styling'\nimport { error_messages } from './get-registry.constants'\n\nexport function is_url(path: string) {\n  try {\n    new URL(path)\n    return true\n  } catch (error) {\n    return false\n  }\n}\n\nexport function get_registry_url(path: string) {\n  if (is_url(path)) {\n    // If the url contains /chat/b/, we assume it's the v0 registry.\n    //NOTE: We need to add the /json suffix if it's missing.\n    const url = new URL(path)\n    if (url.pathname.match(/\\/chat\\/b\\//) && !url.pathname.endsWith('/json')) {\n      url.pathname = `${url.pathname}/json`\n    }\n\n    return url.toString()\n  }\n\n  return `${REGISTRY_URL}/${path}`\n}\n\nexport async function fetch_registry_url(paths: string[]) {\n  try {\n    const results = await Promise.all(\n      paths.map(async path => {\n        const url = get_registry_url(path)\n        const response = await axios.get(url)\n\n        if (response.status !== 200) {\n          check_status(response, url)\n        }\n\n        return response.data\n      })\n    )\n\n    return results\n  } catch (error) {\n    logger.error({\n      args: ['\\nFailed to fetch from registry.'],\n      with_icon: true,\n    })\n    return []\n  }\n}\n\nexport function check_status(response: any, url: string) {\n  if (response.status === 401) {\n    throw new Error(\n      `You are not authorized to access the component at ${highlighter.info(\n        url\n      )}.\\nIf this is a remote registry, you may need to authenticate.`\n    )\n  }\n\n  if (response.status === 404) {\n    throw new Error(\n      `The component at ${highlighter.info(\n        url\n      )} was not found.\\nIt may not exist at the registry. Please make sure it is a valid component.`\n    )\n  }\n\n  if (response.status === 403) {\n    throw new Error(\n      `You do not have access to the component at ${highlighter.info(\n        url\n      )}.\\nIf this is a remote registry, you may need to authenticate or a token.`\n    )\n  }\n\n  const result = response.data\n  const message =\n    result && typeof result === 'object' && 'error' in result\n      ? result.error\n      : response.statusText || error_messages[response.status]\n  throw new Error(`Failed to fetch from ${highlighter.info(url)}.\\n${message}`)\n}\n","import { logger } from '../text-styling'\nimport { registry_base_color_schema, registry_index_schema, registry_item_schema } from './get-registry.dto'\nimport { fetch_registry_url, is_url } from './get-registry.lib'\n\nexport async function get_registry_index() {\n  try {\n    const [result] = await fetch_registry_url(['index.json'])\n\n    return registry_index_schema.parse(result)\n  } catch (error) {\n    logger.error({ args: [`Failed to fetch from registry.`, error] })\n    return null\n  }\n}\n\nexport async function get_registry_item(name: Lowercase<string>, style: 'default') {\n  try {\n    const [result] = await fetch_registry_url([is_url(name) ? name : `styles/${style}/${name}.json`])\n    console.log(hi)\n\n    return registry_item_schema.parse(hi)\n  } catch (error) {\n    logger.error({ args: [`Failed to fetch from registry.`, error] })\n    return null\n  }\n}\n\nexport async function get_registry_base_color(baseColor: string) {\n  try {\n    const [result] = await fetch_registry_url([`colors/${baseColor}.json`])\n\n    return registry_base_color_schema.parse(result)\n  } catch (error) {\n    logger.error({ args: [`Failed to fetch from registry.`, error] })\n    return null\n  }\n}\n\nconst hi = {\n  name: 'button',\n  dependencies: ['@radix-ui/react-slot', 'command', 'tooltip'],\n  registryDependencies: ['dialog'],\n  files: [\n    {\n      name: 'button.tsx',\n      path: 'src/components/button.tsx', // provide the correct path\n      content:\n        \"import React from 'react'\\n\\nimport * as TooltipPrimitive from '@radix-ui/react-tooltip'\\nimport { Slot } f\",\n    },\n  ],\n  type: 'components:ui',\n}\n\nconst je = {\n  name: 'button',\n  dependencies: ['@radix-ui/react-slot', 'command', 'tooltip'],\n  registryDependencies: ['dialog'],\n  files: [\n    {\n      name: 'button.tsx',\n      path: 'src/components/button.tsx', // provide the correct path\n      content: `import React from 'react';\n\nimport * as TooltipPrimitive from '@radix-ui/react-tooltip';\nimport { Slot } from '@radix-ui/react-slot';\n\n// Add more content here as needed...\n`,\n      type: 'components:ui', // specify a valid type\n    },\n  ],\n  type: 'components:ui',\n}\n","import { Command } from 'commander'\nimport { init_command_config } from './init.constants'\nimport { init_command_action } from './init.lib'\n\nconst { name, description, options } = init_command_config\nconst { option_1, option_2, option_3, option_4, option_5, option_6 } = options\n\nexport function init_command(): Command {\n  const init_command = new Command(name)\n\n  init_command\n    .description(description)\n    .option(option_1.flags, option_1.description, option_1.defaultValue)\n    .option(option_2.flags, option_2.description, option_2.defaultValue)\n    .option(option_3.flags, option_3.description, option_3.defaultValue)\n    .option(option_4.flags, option_4.description, option_4.defaultValue)\n    .option(option_5.flags, option_5.description, option_5.defaultValue)\n    .option(option_6.flags, option_6.description, option_6.defaultValue)\n    .action(init_command_action)\n\n  return init_command\n}\n","#!/usr/bin/env node\n// This is the main file of the duck-ui CLI application written with TypeScript\n\nimport { init } from './main'\n\n// INIT START\n\nprocess.on('SIGINT', () => process.exit(0))\nprocess.on('SIGTERM', () => process.exit(0))\n\nif (require.main === module) {\n  init()\n}\n\ninit()\n// INIT END\n"]}