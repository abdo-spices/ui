{
  "name": "alert-dialog",
  "type": "registry:ui",
  "dependencies": [],
  "registryDependencies": [],
  "root_folder": "registry-ui-components/alert-dialog",
  "files": [
    {
      "path": "registry-ui-components/alert-dialog/alert-dialog.tsx",
      "content": "'use client'\r\nimport * as React from 'react'\r\nimport * as AlertDialogPrimitive from '@radix-ui/react-alert-dialog'\r\n\r\nimport { cn } from '@/lib/utils'\r\nimport { buttonVariants } from '@/registry/registry-ui-components'\r\nimport { DialogCloseProps } from '@radix-ui/react-dialog'\r\nimport {\r\n  SheetContent,\r\n  SheetTrigger,\r\n  SheetHeader,\r\n  SheetFooter,\r\n  SheetTitle,\r\n  SheetDescription,\r\n  SheetClose,\r\n  Sheet,\r\n} from '@/registry/default/ui'\r\n\r\n//NOTE: Alert Dialog Drawer\r\ninterface AlertDialogDrawerContentType extends Partial<React.ComponentPropsWithoutRef<typeof SheetContent>> {}\r\ninterface AlertDialogDrawerTriggerentType extends Partial<React.ComponentPropsWithoutRef<typeof SheetTrigger>> {}\r\ninterface StateType {\r\n  drawer: boolean\r\n  alert: boolean\r\n}\r\n\r\ninterface AlertDialogDrawerActionsType {\r\n  cancel?: () => void\r\n  continue?: () => void\r\n}\r\n\r\ninterface AlertDialogDrawerHeaderType extends Partial<React.ComponentPropsWithoutRef<typeof SheetHeader>> {\r\n  head: React.ReactNode\r\n  description: React.ReactNode\r\n}\r\n\r\ninterface AlertDialogDrawerFooterType extends Partial<React.ComponentPropsWithoutRef<typeof SheetFooter>> {\r\n  cancel?: React.HTMLProps<HTMLButtonElement> & DialogCloseProps\r\n  submit?: React.HTMLProps<HTMLDivElement>\r\n}\r\ninterface AlertDialogSheetProps {\r\n  state: boolean\r\n  header: AlertDialogDrawerHeaderType\r\n  footer: AlertDialogDrawerFooterType\r\n  trigger: AlertDialogDrawerTriggerentType\r\n  content: AlertDialogDrawerContentType\r\n  actions?: AlertDialogDrawerActionsType\r\n}\r\n\r\n//NOTE: Alert Dialog Primitive\r\nconst AlertDialog = AlertDialogPrimitive.Root as typeof AlertDialogPrimitive.Root & AlertDialogCompound\r\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\r\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\r\n\r\n//NOTE: Alert Dialog Overlay\r\nconst AlertDialogOverlay = React.forwardRef<\r\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\r\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\r\n>(({ className, ...props }, ref) => (\r\n  <AlertDialogPrimitive.Overlay\r\n    className={cn(\r\n      'fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0',\r\n      className\r\n    )}\r\n    {...props}\r\n    ref={ref}\r\n  />\r\n))\r\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\r\n\r\n//NOTE: Alert Dialog Content\r\nconst AlertDialogContent = React.forwardRef<\r\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\r\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\r\n>(({ className, ...props }, ref) => (\r\n  <AlertDialogPortal>\r\n    <AlertDialogOverlay />\r\n    <AlertDialogPrimitive.Content\r\n      ref={ref}\r\n      className={cn(\r\n        'fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg',\r\n        className\r\n      )}\r\n      {...props}\r\n    />\r\n  </AlertDialogPortal>\r\n))\r\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\r\n\r\n//NOTE: Alert Dialog Header\r\nconst AlertDialogHeader = ({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) => (\r\n  <div\r\n    className={cn('flex flex-col space-y-2 text-center sm:text-left', className)}\r\n    {...props}\r\n  />\r\n)\r\nAlertDialogHeader.displayName = 'AlertDialogHeader'\r\n\r\n//NOTE: Alert Dialog Footer\r\nconst AlertDialogFooter = ({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) => (\r\n  <div\r\n    className={cn('flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2', className)}\r\n    {...props}\r\n  />\r\n)\r\nAlertDialogFooter.displayName = 'AlertDialogFooter'\r\n\r\n//NOTE: Alert Dialog Title\r\nconst AlertDialogTitle = React.forwardRef<\r\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\r\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\r\n>(({ className, ...props }, ref) => (\r\n  <AlertDialogPrimitive.Title\r\n    ref={ref}\r\n    className={cn('text-lg font-semibold', className)}\r\n    {...props}\r\n  />\r\n))\r\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\r\n\r\n//NOTE: Alert Dialog Description\r\nconst AlertDialogDescription = React.forwardRef<\r\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\r\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\r\n>(({ className, ...props }, ref) => (\r\n  <AlertDialogPrimitive.Description\r\n    ref={ref}\r\n    className={cn('text-sm text-muted-foreground', className)}\r\n    {...props}\r\n  />\r\n))\r\nAlertDialogDescription.displayName = AlertDialogPrimitive.Description.displayName\r\n\r\n//NOTE: Alert Dialog Action\r\nconst AlertDialogAction = React.forwardRef<\r\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\r\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\r\n>(({ className, ...props }, ref) => (\r\n  <AlertDialogPrimitive.Action\r\n    ref={ref}\r\n    className={cn(buttonVariants(), className)}\r\n    {...props}\r\n  />\r\n))\r\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\r\n\r\n//NOTE: Alert Dialog Cancel\r\nconst AlertDialogCancel = React.forwardRef<\r\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\r\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\r\n>(({ className, ...props }, ref) => (\r\n  <AlertDialogPrimitive.Cancel\r\n    ref={ref}\r\n    className={cn(buttonVariants({ variant: 'outline' }), 'mt-2 sm:mt-0', className)}\r\n    {...props}\r\n  />\r\n))\r\n\r\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\r\n\r\n// NOTE: Alert Dialog Compound\r\ninterface AlertDialogCompound {\r\n  Dialog: typeof AlertDialog\r\n  Overlay: typeof AlertDialogPrimitive.Overlay\r\n  Content: typeof AlertDialogPrimitive.Content\r\n  Portal: typeof AlertDialogPrimitive.Portal\r\n  Header: typeof AlertDialogHeader\r\n  Footer: typeof AlertDialogFooter\r\n  Title: typeof AlertDialogTitle\r\n  Description: typeof AlertDialogDescription\r\n  Action: typeof AlertDialogAction\r\n  Cancel: typeof AlertDialogCancel\r\n  Trigger: typeof AlertDialogTrigger\r\n  Sheet: typeof AlertDialogSheet\r\n}\r\n\r\nconst AlertDialogSheet = ({ trigger, header, footer, content, actions, state }: AlertDialogSheetProps) => {\r\n  const { className: triggerClassName, children: triggerChildren, ...triggerProps } = trigger\r\n  const { className: contentClassName, children: contentChildren, ...contentProps } = content\r\n  const { className: footerClassName, children: footerChildren, submit, cancel, ...footerProps } = footer\r\n  const { className: headerClassName, children: headerChildren, description, head: title, ...headerProps } = header\r\n  const { className: submitClassName, onClick: submitOnClick, children: submitChildren, ...submitProps } = submit ?? {}\r\n  const { className: cancelClassName, children: cancelChildren, ...cancelProps } = cancel ?? {}\r\n\r\n  const {\r\n    state: changeState,\r\n    handleDrawerOpenChange,\r\n    handleAlertCancel,\r\n    handleAlertContinue,\r\n    setState,\r\n  } = useDuckAlert({ trigger, header, footer, content, actions, state })\r\n\r\n  return (\r\n    <>\r\n      <AlertDialog open={changeState.alert}>\r\n        <AlertDialog.Trigger\r\n          className={cn(triggerClassName)}\r\n          {...triggerProps}\r\n          onClick={() => setState({ drawer: true, alert: false })}\r\n        >\r\n          {triggerChildren}\r\n        </AlertDialog.Trigger>\r\n        <AlertDialog.Content>\r\n          <AlertDialog.Header>\r\n            <AlertDialog.Title>Are you absolutely sure?</AlertDialog.Title>\r\n            <AlertDialog.Description>\r\n              This action will consider these replies as Drafts, you can delete, adjust and send from Drafts section on\r\n              the side header.\r\n            </AlertDialog.Description>\r\n          </AlertDialog.Header>\r\n          <AlertDialog.Footer>\r\n            <AlertDialog.Cancel onClick={handleAlertCancel}>Cancel</AlertDialog.Cancel>\r\n            <AlertDialog.Action onClick={handleAlertContinue}>Continue</AlertDialog.Action>\r\n          </AlertDialog.Footer>\r\n        </AlertDialog.Content>\r\n      </AlertDialog>\r\n\r\n      <Sheet\r\n        open={changeState.drawer}\r\n        onOpenChange={handleDrawerOpenChange}\r\n      >\r\n        <SheetContent\r\n          className={cn('flex flex-col w-full h-full', contentClassName)}\r\n          {...contentProps}\r\n        >\r\n          <div\r\n            data-role-wrapper\r\n            className=\"flex flex-col gap-4 w-full h-full\"\r\n          >\r\n            {header && (\r\n              <SheetHeader\r\n                className={cn('', headerClassName)}\r\n                {...headerProps}\r\n              >\r\n                {headerChildren ? (\r\n                  headerChildren\r\n                ) : (\r\n                  <>\r\n                    <SheetTitle>{title}</SheetTitle>\r\n                    <SheetDescription>{description}</SheetDescription>\r\n                  </>\r\n                )}\r\n              </SheetHeader>\r\n            )}\r\n            {contentChildren}\r\n            {footer &&\r\n              (footerChildren ? (\r\n                footerChildren\r\n              ) : (\r\n                <SheetFooter\r\n                  className={cn('gap-2', footerClassName)}\r\n                  {...footerProps}\r\n                >\r\n                  <SheetClose\r\n                    asChild\r\n                    className={cn(cancelClassName)}\r\n                    {...cancelProps}\r\n                  >\r\n                    {cancelChildren}\r\n                  </SheetClose>\r\n                  <div\r\n                    onClick={e => {\r\n                      setState({ drawer: false, alert: false })\r\n                      submitOnClick?.(e)\r\n                    }}\r\n                    className={cn('ml-0')}\r\n                    {...submitProps}\r\n                  >\r\n                    {submitChildren}\r\n                  </div>\r\n                </SheetFooter>\r\n              ))}\r\n          </div>\r\n        </SheetContent>\r\n      </Sheet>\r\n    </>\r\n  )\r\n}\r\n\r\nAlertDialogSheet.displayName = 'AlertDialogDrawer'\r\n\r\n//NOTE: Alert Dialog Sheet Hook\r\nconst useDuckAlert = ({ actions, state: changeState }: AlertDialogSheetProps) => {\r\n  const [state, setState] = React.useState<StateType>({ drawer: false, alert: false })\r\n  const changeStateRef = React.useRef<boolean | null>(null)\r\n\r\n  React.useEffect(() => {\r\n    changeStateRef.current = changeState\r\n  }, [])\r\n\r\n  const handleAlertCancel = React.useCallback(() => {\r\n    actions?.cancel && actions.cancel()\r\n    setState(prevState => ({ ...prevState, alert: false, drawer: true }))\r\n  }, [])\r\n\r\n  const handleAlertContinue = React.useCallback(() => {\r\n    actions?.continue && actions.continue()\r\n    setState(prevState => ({ ...prevState, alert: false, drawer: false }))\r\n  }, [])\r\n\r\n  const handleDrawerOpenChange = React.useCallback(\r\n    (drawerState: boolean) => {\r\n      const showAlert = !drawerState && (changeState || true) && changeStateRef.current !== changeState\r\n\r\n      setState(() => ({\r\n        alert: showAlert as boolean,\r\n        drawer: changeState || true ? drawerState : false,\r\n      }))\r\n    },\r\n    [changeState]\r\n  )\r\n\r\n  return {\r\n    handleAlertCancel,\r\n    handleAlertContinue,\r\n    handleDrawerOpenChange,\r\n    state,\r\n    setState,\r\n  }\r\n}\r\n\r\n// NOTE: Alert Dialog Compound Components\r\nAlertDialog.Overlay = AlertDialogOverlay\r\nAlertDialog.Content = AlertDialogContent\r\nAlertDialog.Header = AlertDialogHeader\r\nAlertDialog.Footer = AlertDialogFooter\r\nAlertDialog.Title = AlertDialogTitle\r\nAlertDialog.Action = AlertDialogAction\r\nAlertDialog.Cancel = AlertDialogCancel\r\nAlertDialog.Trigger = AlertDialogTrigger\r\nAlertDialog.Description = AlertDialogDescription\r\nAlertDialog.Sheet = AlertDialogSheet\r\n\r\nexport { AlertDialog }\r\n",
      "type": "registry:ui"
    },
    {
      "path": "registry-ui-components/alert-dialog/index.ts",
      "content": "import * from \"./alert-dialog\"",
      "type": "registry:ui"
    }
  ]
}