{
  "name": "drawer-8",
  "type": "registry:example",
  "registryDependencies": [
    "drawer"
  ],
  "root_folder": "registry-examples-components/drawer",
  "files": [
    {
      "path": "registry-examples-components/drawer/drawer-8.tsx",
      "content": "'use client'\n\nimport * as React from 'react'\nimport {\n  Drawer,\n  DrawerContent,\n  DrawerDescription,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerTrigger,\n} from '@/registry/registry-ui-components/drawer'\nimport { Button } from '@/registry/registry-ui-components/button'\nimport { Badge } from '@/registry/registry-ui-components/badge'\nimport { cn } from '@/lib'\nimport { motion } from 'motion/react'\nimport { AnimateNumber } from 'motion-number'\nimport { toast } from 'sonner'\nimport { Separator } from '@/registry/default/ui'\n\nexport default function DrawerDemo8() {\n  const [open, setOpen] = React.useState(false)\n  const [progress, setProgress] = React.useState(0)\n  const barCount = 37\n  const filledBars = Math.floor((progress / 100) * barCount)\n  const autoIncrement = true\n\n  React.useEffect(() => {\n    if (autoIncrement && progress < 100) {\n      const timer = setInterval(() => {\n        setProgress(prev => Math.min(prev + 1, 100))\n      }, 50)\n      return () => clearInterval(timer)\n    }\n  }, [progress, autoIncrement])\n\n  const getBarColor = (index: number) => {\n    const progress = (index / barCount) * 100\n    if (progress <= 15) return 'bg-red-500'\n    if (progress <= 40) return 'bg-orange-500'\n    if (progress <= 65) return 'bg-yellow-500'\n    if (progress <= 90) return 'bg-lime-500'\n    return 'bg-green-500'\n  }\n  // Calculate badge color based on progress\n  const getBadgeColor = (progress: number) => {\n    if (progress <= 15) return 'bg-red-500'\n    if (progress <= 40) return 'bg-orange-500'\n    if (progress <= 65) return 'bg-yellow-500'\n    if (progress <= 95) return 'bg-lime-500'\n    return 'bg-green-500'\n  }\n  console.log(open)\n  return (\n    <Drawer\n      fixed={true}\n      shouldScaleBackground={false}\n    >\n      <DrawerTrigger asChild>\n        <Button\n          variant=\"outline\"\n          className=\"mt-20\"\n        >\n          Hard Checklist\n        </Button>\n      </DrawerTrigger>\n      <DrawerContent className=\"max-w-xs mx-auto after:hidden mb-8 rounded-xl overflow-hidden\">\n        <div className={cn('p-4 mx-auto w-full max-w-sm pt-2 overflow-hidden parent', open && 'parent2')}>\n          <DuckTransition1 className={cn(open && 'one2')}>\n            <HI\n              barCount={barCount}\n              filledBars={filledBars}\n              progress={progress}\n              getBadgeColor={getBadgeColor}\n              getBarColor={getBarColor}\n              setOpen={setOpen}\n              setProgress={setProgress}\n            />\n          </DuckTransition1>\n          <DuckTransition2 className={cn(open && 'two2')}>\n            <HI2 setOpen={setOpen} />\n          </DuckTransition2>\n        </div>\n      </DrawerContent>\n    </Drawer>\n  )\n}\n\nexport interface DuckTransitionProps extends React.HTMLAttributes<HTMLDivElement> {}\n\nexport function DuckTransition1({ className, children, ...props }: DuckTransitionProps) {\n  return (\n    <div\n      className={cn(\n        // 'ease-[linear(0,_0.001_0.4%,_0.007_0.9%,_0.016_1.4%,_0.028_1.9%,_0.065_3%,_0.114_4.1%,_0.165_5.1%,_0.228_6.2%,_0.504_10.7%,_0.62_12.7%,_0.734_14.9%,_0.827_17%,_0.865_18%,_0.902_19.1%,_0.934_20.2%,_0.963_21.3%,_0.987_22.4%,_1.009_23.6%,_1.026_24.8%,_1.04_26%,_1.051_27.4%,_1.059_28.9%,_1.064_30.5%,_1.064_32.2%,_1.062_34%,_1.056_36.1%,_1.026_44.1%,_1.013_47.9%,_1.004_51.8%,_0.999_55.9%,_0.996_63.9%,_1_83.2%,_1)] p-4 flex flex-col gap-2 bg-background overflow-hidden',\n        'one',\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </div>\n  )\n}\n\nexport function DuckTransition2({ className, children, ...props }: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn('two', className)}\n      {...props}\n    >\n      {children}\n    </div>\n  )\n}\n\nexport function HI(props: {\n  progress: number\n  filledBars: number\n  barCount: number\n  getBadgeColor: (progress: number) => string\n  getBarColor: (index: number) => string\n  setProgress: React.Dispatch<React.SetStateAction<number>>\n  setOpen: React.Dispatch<React.SetStateAction<boolean>>\n}) {\n  const { progress, getBadgeColor, barCount, filledBars, getBarColor, setOpen, setProgress } = props\n\n  return (\n    <>\n      <div className=\"flex items-center justify-between\">\n        <DrawerTitle className=\"text-md\">Almost there.</DrawerTitle>\n        <Badge\n          variant=\"destructive\"\n          className={`rounded-lg will-change-auto w-[50px] transition-colors duration-300 ${getBadgeColor(progress)}`}\n        >\n          <AnimateNumber\n            format={{ style: 'decimal', notation: 'standard' }}\n            prefix=\"%\"\n            // animate={{ backgroundClip: 'text' }}\n          >\n            {progress}\n          </AnimateNumber>\n        </Badge>\n      </div>\n      <DrawerDescription>Complete the remaining steps in the checklist before going live.</DrawerDescription>\n      <div className=\"flex justify-between w-full\">\n        {[...Array(barCount)].map((_, index) => (\n          <motion.div\n            key={index}\n            initial={{ height: '1rem' }}\n            animate={{ height: '1.5rem', scale: index < filledBars ? [1, 1.1, 1] : 1 }}\n            transition={{ duration: 0.5, delay: index * 0.008 }}\n            className={`w-[5px] h-[1rem] rounded-full transition-colors duration-300 ${\n              index < filledBars ? getBarColor(index) : 'bg-gray-200'\n            }`}\n          />\n        ))}\n      </div>\n\n      <DrawerFooter className=\"px-0 pb-0\">\n        <Button\n          variant=\"secondary\"\n          onClick={() => {\n            console.info('hi, i was clicked!!')\n            setOpen(prev => !prev)\n          }}\n        >\n          See checklist\n        </Button>\n        <Button\n          variant=\"secondary\"\n          disabled={progress < 100}\n          className={cn(progress === 100 && 'bg-green-500 text-white hover:bg-green-500/90')}\n          loading={progress < 100}\n          onClick={() => {\n            setProgress(0)\n            toast.success('Wow duck you are done!')\n          }}\n        >\n          {progress === 100 ? 'Complete the checklist' : 'Loading to checklist'}\n        </Button>\n      </DrawerFooter>\n    </>\n  )\n}\n\nexport function HI2(props: { setOpen: React.Dispatch<React.SetStateAction<boolean>> }) {\n  const { setOpen } = props\n  return (\n    <>\n      <DrawerTitle className=\"text-md\">Checklist</DrawerTitle>\n      <Separator />\n      <ul className=\"flex flex-col gap-3\">\n        {[\n          { title: 'Plan the project', description: 'Outline key milestones and deliverables.' },\n          { title: 'Gather resources', description: 'Collect necessary tools, assets, and information.' },\n          { title: 'Start development', description: 'Begin coding and implementing core features.' },\n          { title: 'Testing phase', description: 'Perform debugging, QA, and performance optimizations.' },\n          { title: 'Launch & review', description: 'Deploy the project and gather feedback for improvements.' },\n        ].map((task, index) => (\n          <li\n            key={index}\n            className=\"flex items-start gap-3\"\n          >\n            <input\n              type=\"checkbox\"\n              className=\"w-4 h-4 mt-1 accent-green-500\"\n              id={`todo-${index}`}\n            />\n            <div>\n              <label\n                htmlFor={`todo-${index}`}\n                className=\"text-md font-semibold block\"\n              >\n                {task.title}\n              </label>\n              <p className=\"text-sm text-muted-foreground\">{task.description}</p>\n            </div>\n          </li>\n        ))}\n      </ul>\n      <Button\n        variant=\"secondary\"\n        onClick={() => {\n          setOpen(!open)\n        }}\n      >\n        See checklist\n      </Button>\n    </>\n  )\n}\n",
      "type": "registry:example"
    }
  ]
}